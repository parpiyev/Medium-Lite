{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import cookieParser from \"cookie-parser\";\nimport express from \"express\";\nimport { NODE_ENV, PORT } from \"@config\";\nimport { Routes } from \"@interfaces/routes.interface\";\nimport errorMiddleware from \"@middlewares/error.middleware\";\nimport { logger, stream } from \"@utils/logger\";\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || \"development\";\n    this.port = PORT || 5000;\n\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach((route) => {\n      this.app.use(\"/\", route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: \"REST API\",\n          version: \"1.0.0\",\n          description: \"Example docs\",\n        },\n      },\n      apis: [\"swagger.yaml\"],\n    };\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport default App;\n"],"names":["App","listen","app","port","logger","info","env","getServer","initializeMiddlewares","use","express","json","urlencoded","extended","cookieParser","initializeRoutes","routes","forEach","route","router","initializeSwagger","options","swaggerDefinition","title","version","description","apis","initializeErrorHandling","errorMiddleware","constructor","NODE_ENV","PORT"],"mappings":"AAAA;;;;+BAkEA;;aAAA;;qDAlEyB;gDACL;wBACW;wDAEH;wBACG;;;;;;AAE/B,IAAA,AAAMA,MAAN,MAAMA;IAgBGC,SAAS;QACd,IAAI,CAACC,GAAG,CAACD,MAAM,CAAC,IAAI,CAACE,IAAI,EAAE,IAAM;YAC/BC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;YAC/CD,cAAM,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACC,GAAG,CAAC,QAAQ,CAAC;YAC9CF,cAAM,CAACC,IAAI,CAAC,CAAC,4BAA6B,EAAE,IAAI,CAACF,IAAI,CAAC,CAAC;YACvDC,cAAM,CAACC,IAAI,CAAC,CAAC,iCAAiC,CAAC;QACjD;IACF;IAEOE,YAAY;QACjB,OAAO,IAAI,CAACL,GAAG;IACjB;IAEQM,wBAAwB;QAC9B,IAAI,CAACN,GAAG,CAACO,GAAG,CAACC,gBAAO,CAACC,IAAI;QACzB,IAAI,CAACT,GAAG,CAACO,GAAG,CAACC,gBAAO,CAACE,UAAU,CAAC;YAAEC,UAAU,IAAI;QAAC;QACjD,IAAI,CAACX,GAAG,CAACO,GAAG,CAACK,IAAAA,qBAAY;IAC3B;IAEQC,iBAAiBC,MAAgB,EAAE;QACzCA,OAAOC,OAAO,CAAC,CAACC,QAAU;YACxB,IAAI,CAAChB,GAAG,CAACO,GAAG,CAAC,KAAKS,MAAMC,MAAM;QAChC;IACF;IAEQC,oBAAoB;QAC1B,MAAMC,UAAU;YACdC,mBAAmB;gBACjBjB,MAAM;oBACJkB,OAAO;oBACPC,SAAS;oBACTC,aAAa;gBACf;YACF;YACAC,MAAM;gBAAC;aAAe;QACxB;IACF;IAEQC,0BAA0B;QAChC,IAAI,CAACzB,GAAG,CAACO,GAAG,CAACmB,wBAAe;IAC9B;IAnDAC,YAAYb,MAAgB,CAAE;QAC5B,IAAI,CAACd,GAAG,GAAGQ,IAAAA,gBAAO;QAClB,IAAI,CAACJ,GAAG,GAAGwB,gBAAQ,IAAI;QACvB,IAAI,CAAC3B,IAAI,GAAG4B,YAAI,IAAI;QAEpB,IAAI,CAACvB,qBAAqB;QAC1B,IAAI,CAACO,gBAAgB,CAACC;QACtB,IAAI,CAACI,iBAAiB;QACtB,IAAI,CAACO,uBAAuB;IAC9B;AA2CF;MAEA,WAAe3B"}