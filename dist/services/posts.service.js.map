{"version":3,"sources":["../../src/services/posts.service.ts"],"sourcesContent":["const posts = require(\"../databases/posts.json\");\nimport { HttpException } from \"@exceptions/HttpException\";\nimport { IPost } from \"@/interfaces/posts.interface\";\nimport { isEmpty } from \"@utils/util\";\nimport { CreatePostDto } from \"@/dtos/posts.dto\";\nimport { writeFile } from \"fs/promises\";\nimport { v4 } from \"uuid\";\nimport UsersService from \"./users.service\";\n\nexport default class PostsService {\n  private posts: IPost[] = posts;\n  private usersService = new UsersService();\n\n  public findAllPost(): IPost[] {\n    return Object.values(this.posts);\n  }\n\n  public async findOnePost(key = \"id\", value: string): Promise<IPost> {\n    if (isEmpty(key) || isEmpty(value))\n      throw new HttpException(400, \"findOnePost Params is empty\");\n\n    let post: IPost;\n    if (key == \"id\") {\n      console.log(this.posts[value]);\n      post = this.posts[value];\n      this.posts[value]?.viewsAmount\n        ? this.posts[value].viewsAmount++\n        : (this.posts[value].viewsAmount = 1);\n\n      const path = __dirname + \"/../databases/posts.json\";\n      await writeFile(path, JSON.stringify(this.posts));\n    } else {\n      for (let i = 0; i < this.posts.length; i++) {\n        if (this.posts[i][key] == value) {\n          post = this.posts[i];\n        }\n      }\n    }\n\n    if (!post) throw new HttpException(409, \"Post doesn't exist\");\n\n    post.author = await this.usersService.findOneUser(\n      \"id\",\n      post.author as string\n    );\n\n    return post;\n  }\n\n  public async createPost(postData: CreatePostDto): Promise<IPost> {\n    if (isEmpty(postData)) throw new HttpException(400, \"PostData is empty\");\n\n    const id = v4();\n    this.posts[`${id}`] = {\n      id,\n      ...postData,\n      createdAt: new Date(),\n    };\n\n    const path = __dirname + \"/../databases/posts.json\";\n\n    await writeFile(path, JSON.stringify(this.posts));\n\n    return this.posts[0];\n  }\n}\n"],"names":["PostsService","posts","require","findAllPost","Object","values","findOnePost","key","value","isEmpty","HttpException","post","console","log","viewsAmount","path","__dirname","writeFile","JSON","stringify","i","length","author","usersService","findOneUser","createPost","postData","id","v4","createdAt","Date","UsersService"],"mappings":"AAAA;;;;;;aASqBA;;+BARS;sBAEN;0BAEE;sBACP;qDACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPzB,MAAMC,QAAQC,QAAQ;AASP,IAAA,AAAMF,eAAN,MAAMA;IAIZG,cAAuB;QAC5B,OAAOC,OAAOC,MAAM,CAAC,IAAI,CAACJ,KAAK;IACjC;IAEA,MAAaK,YAAYC,MAAM,IAAI,EAAEC,KAAa,EAAkB;QAClE,IAAIC,IAAAA,aAAO,EAACF,QAAQE,IAAAA,aAAO,EAACD,QAC1B,MAAM,IAAIE,4BAAa,CAAC,KAAK,+BAA+B;QAE9D,IAAIC;QACJ,IAAIJ,OAAO,MAAM;gBAGf;YAFAK,QAAQC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACO,MAAM;YAC7BG,OAAO,IAAI,CAACV,KAAK,CAACO,MAAM;YACxB,CAAA,CAAA,oBAAA,IAAI,CAACP,KAAK,CAACO,MAAM,cAAjB,+BAAA,KAAA,IAAA,kBAAmBM,WAAW,AAAD,IACzB,IAAI,CAACb,KAAK,CAACO,MAAM,CAACM,WAAW,KAC5B,IAAI,CAACb,KAAK,CAACO,MAAM,CAACM,WAAW,GAAG,CAAE;YAEvC,MAAMC,OAAOC,YAAY;YACzB,MAAMC,IAAAA,mBAAS,EAACF,MAAMG,KAAKC,SAAS,CAAC,IAAI,CAAClB,KAAK;QACjD,OAAO;YACL,IAAK,IAAImB,IAAI,GAAGA,IAAI,IAAI,CAACnB,KAAK,CAACoB,MAAM,EAAED,IAAK;gBAC1C,IAAI,IAAI,CAACnB,KAAK,CAACmB,EAAE,CAACb,IAAI,IAAIC,OAAO;oBAC/BG,OAAO,IAAI,CAACV,KAAK,CAACmB,EAAE;gBACtB,CAAC;YACH;QACF,CAAC;QAED,IAAI,CAACT,MAAM,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAE9DC,KAAKW,MAAM,GAAG,MAAM,IAAI,CAACC,YAAY,CAACC,WAAW,CAC/C,MACAb,KAAKW,MAAM;QAGb,OAAOX;IACT;IAEA,MAAac,WAAWC,QAAuB,EAAkB;QAC/D,IAAIjB,IAAAA,aAAO,EAACiB,WAAW,MAAM,IAAIhB,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMiB,KAAKC,IAAAA,QAAE;QACb,IAAI,CAAC3B,KAAK,CAAC,CAAC,EAAE0B,GAAG,CAAC,CAAC,GAAG;YACpBA;WACGD;YACHG,WAAW,IAAIC;;QAGjB,MAAMf,OAAOC,YAAY;QAEzB,MAAMC,IAAAA,mBAAS,EAACF,MAAMG,KAAKC,SAAS,CAAC,IAAI,CAAClB,KAAK;QAE/C,OAAO,IAAI,CAACA,KAAK,CAAC,EAAE;IACtB;;aAtDQA,QAAiBA;aACjBsB,eAAe,IAAIQ,qBAAY;;AAsDzC"}