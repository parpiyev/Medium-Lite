{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["const users = require(\"../databases/users.json\");\nimport { HttpException } from \"@exceptions/HttpException\";\nimport { IUser } from \"@/interfaces/users.interface\";\nimport { isEmpty } from \"@utils/util\";\nimport { CreateUserDto } from \"@/dtos/users.dto\";\nimport { writeFile } from \"fs/promises\";\nimport { hash } from \"bcrypt\";\nimport { v4 } from \"uuid\";\n\nexport default class UsersService {\n  public users = users;\n\n  public findAllUser(): IUser[] {\n    return Object.values(this.users);\n  }\n\n  public async findOneUser(\n    key = \"id\",\n    value: string,\n    isChecked = true\n  ): Promise<IUser> {\n    if (isEmpty(key) || isEmpty(value))\n      throw new HttpException(400, \"findOneUser Params is empty\");\n\n    let user: IUser;\n    if (key == \"id\") {\n      user = this.users[value];\n    } else {\n      const users: IUser[] = Object.values(this.users);\n\n      for (let i = 0; i < users.length; i++) {\n        if (users[i][key] == value) user = users[i];\n      }\n    }\n\n    if (!user && isChecked) throw new HttpException(409, \"User doesn't exist\");\n\n    return user;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<IUser> {\n    if (isEmpty(userData)) throw new HttpException(400, \"userData is empty\");\n\n    const findUser: IUser = await this.findOneUser(\n      \"username\",\n      userData.username,\n      false\n    );\n\n    if (findUser)\n      throw new HttpException(\n        409,\n        `This username ${userData.username} already exists`\n      );\n\n    userData.password = await hash(userData.password, 10);\n\n    const id = v4(),\n      path = __dirname + \"/../databases/users.json\";\n\n    this.users[`${id}`] = { id, ...userData };\n\n    await writeFile(path, JSON.stringify(this.users));\n\n    return this.users[`${id}`];\n  }\n}\n"],"names":["UsersService","users","require","findAllUser","Object","values","findOneUser","key","value","isChecked","isEmpty","HttpException","user","i","length","createUser","userData","findUser","username","password","hash","id","v4","path","__dirname","writeFile","JSON","stringify"],"mappings":"AAAA;;;;;;aASqBA;;+BARS;sBAEN;0BAEE;wBACL;sBACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPnB,MAAMC,QAAQC,QAAQ;AASP,IAAA,AAAMF,eAAN,MAAMA;IAGZG,cAAuB;QAC5B,OAAOC,OAAOC,MAAM,CAAC,IAAI,CAACJ,KAAK;IACjC;IAEA,MAAaK,YACXC,MAAM,IAAI,EACVC,KAAa,EACbC,YAAY,IAAI,EACA;QAChB,IAAIC,IAAAA,aAAO,EAACH,QAAQG,IAAAA,aAAO,EAACF,QAC1B,MAAM,IAAIG,4BAAa,CAAC,KAAK,+BAA+B;QAE9D,IAAIC;QACJ,IAAIL,OAAO,MAAM;YACfK,OAAO,IAAI,CAACX,KAAK,CAACO,MAAM;QAC1B,OAAO;YACL,MAAMP,QAAiBG,OAAOC,MAAM,CAAC,IAAI,CAACJ,KAAK;YAE/C,IAAK,IAAIY,IAAI,GAAGA,IAAIZ,MAAMa,MAAM,EAAED,IAAK;gBACrC,IAAIZ,KAAK,CAACY,EAAE,CAACN,IAAI,IAAIC,OAAOI,OAAOX,KAAK,CAACY,EAAE;YAC7C;QACF,CAAC;QAED,IAAI,CAACD,QAAQH,WAAW,MAAM,IAAIE,4BAAa,CAAC,KAAK,sBAAsB;QAE3E,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAkB;QAC/D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMM,WAAkB,MAAM,IAAI,CAACX,WAAW,CAC5C,YACAU,SAASE,QAAQ,EACjB,KAAK;QAGP,IAAID,UACF,MAAM,IAAIN,4BAAa,CACrB,KACA,CAAC,cAAc,EAAEK,SAASE,QAAQ,CAAC,eAAe,CAAC,EACnD;QAEJF,SAASG,QAAQ,GAAG,MAAMC,IAAAA,YAAI,EAACJ,SAASG,QAAQ,EAAE;QAElD,MAAME,KAAKC,IAAAA,QAAE,KACXC,OAAOC,YAAY;QAErB,IAAI,CAACvB,KAAK,CAAC,CAAC,EAAEoB,GAAG,CAAC,CAAC,GAAG;YAAEA;WAAOL;QAE/B,MAAMS,IAAAA,mBAAS,EAACF,MAAMG,KAAKC,SAAS,CAAC,IAAI,CAAC1B,KAAK;QAE/C,OAAO,IAAI,CAACA,KAAK,CAAC,CAAC,EAAEoB,GAAG,CAAC,CAAC;IAC5B;;aAvDOpB,QAAQA;;AAwDjB"}